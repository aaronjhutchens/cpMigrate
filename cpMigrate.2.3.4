#########################################
#       cpMigrate Release 1.3.4		#
#       Partial Migration Script        #
#       Aaron Hutchens                  #
#########################################
#       changelog:
#
#       	Added automated SSH key setup
#       	stops migration if remote migrate_accounts directory doesn't contain all of the necessary cpmove files.
#       	Handles multiple homedirs better on the SOURCE server
#
#       TODO:
#		NOW stuff:
#
#			set up proper output for remote script execution << Working now, but it's not pretty.
#
#               Set up SSH checks on the remote server, compare users, make sure it can connect, etc.
#               Don't forget to set up SSL checking/echoing as needed.
#               Set an algorithm for better IP allocation, probably considering reseller IP addresses and such.
#               I'm not certain how to handle this, but we are going to need a better way of parsing the src/dst home dir;
#               Right now this won't work if there are multiple home directories.

#!/bin/bash

declare -rx SCRIPT=${0##*/}

declare -rx cat=`which cat`
declare -rx sort=`which sort`
declare -rx awk=`which awk`
declare -rx uniq=`which uniq`
declare -rx ls=`which ls`
declare -rx grep=`which grep`
declare -rx wc=`which wc`
declare -rx mv=`which mv`

alias ll='ls -lah'

checkScreen(){
#### ****CHECK TO SEE IF WE ARE RUNNIN IN SCREEN BEFORE WE DO ANYTHING!!!!!

	if [ -z $STY ]
	then
		echo
		read -p "Please aknowledge that you are NOT running in screen, and YOU are responsible for anything that happens. . .(just press enter)"
		echo
	fi
}

alreadyPrinted=0
debug=0
useMenu=1
verbose=1
mainIP=$(awk '/^ADDR/ {print $2}' /etc/wwwacct.conf)

#       Touch some logs, if ya know what I mean. . .
touch /root/migration.report
report="/root/migration.report"
touch /root/migration.err
errorLog="/root/migration.err"
touch /root/migration.log
log="/root/migration.log"
touch /root/remote.log
remoteLog=/root/remote.log

curTime=$(date)

getScript(){
#	Gets one of the projects and names them properly.
	echo -en "\n\nRetrieving $1 from Singlehop repo. . .\n\n"
	if [[ $# -ne 1 ]]
	then
		echo "Something went wrong here, you should probably let Aaron know that the getScript() function failed."
	elif [[ ! -e /root/$1 ]]
	then
		wget ssa-sandbox1.singlehop.net/scripts/$1/latest -O /root/$1 && chmod +x /root/$1 
		if [[ $? -ne 0 ]]
		then
			echo "The script retrieval appears to have failed! Exiting program for now, please make sure you can run the following command:"
			echo -en "\n\nwget ssa-sandbox1.singlehop.net/scripts/$1/latest -O /root/$1 && chmod +x /root/$1\n\n"
			rm -f /root/$1
			exit 1
		else
			echo -en "\n\nScript retrieval succesful!\n\n"
		fi
	else
		echo "Looks like we already have it, proceeding. . ."
	fi

}
runcpPerm(){
#	Gets the cpPerm script and runs it on the dest server
	getScript cpPerm
	case $verbose in
		0)
			echo -en "\nCorrecting homedir permissions on destination environment. . ."
			ssh root@"$destIP" -p "$sshPort" 'bash -s' 2>/dev/null < /root/cpPerm >> /root/remote.log
			echo -en "GREAT SUCCESS!!"
			;;
		1)
			ssh root@"$destIP" -p "$sshPort" 'bash -s' 2>/dev/null < /root/cpPerm |tee -a /root/remote.log
			;;
		2)
			ssh root@"$destIP" -p "$sshPort" 'bash -s' 2>/dev/null < /root/cpPerm 2>&1 |tee -a /root/remote.log
			;;
	esac
}
getDomainsFromReseller(){
	if [ -z "$reseller" ]
	then
		read -p "Which reseller would you like to migrate? >> " reseller
	fi
	userList=`awk -F: '$2 ~ /'$reseller'/ {print $1}' /etc/trueuserowners|sort |uniq`
	echo -n > /root/domains.txt
	for i in $userList; do awk -F: '/'$i'/ {print $1}' /etc/trueuserdomains >> /root/domains.txt; done
	domainList=/root/domains.txt
}

plusLine(){
        local j
        for ((j=0; j<(($(tput cols)/10)); j++)); do echo -n "++++++++++"; done; echo;
        for ((j=0; j<(($(tput cols)/10)); j++)); do echo -n "++++++++++"; done; echo;
        echo -e "\n"
}
logo(){
        plusLine
	local k
	for ((k=0; k<(($(tput cols)/24)); k++)); do echo -n -e "\t"; done; echo -n -e "cPanel migration utility, written by Aaron Hutchens\n\n";
        plusLine
        echo
        echo
}

getVerbosity(){
	if [[ $verbose == 0 ]]
	then
		verbosity="Quiet"
	fi
	if [[ $verbose == 1 ]]
	then
		verbosity="Normal"
	fi
	if [[ $verbose == 2 ]]
	then
		verbosity="Verbose"
	fi
}

getDomainsFromFile(){

#	Take a file path as a list of domains, hoping it's a text file with domains in it.

	read -p "What file would you like to use? >> " inFile
	if [ -e $inFile ]
	then	
		if [ -s "$inFile" ]
		then
			domainList="$inFile"
			echo -en "\nSetting domain list file to $inFile\n"
		else
			read -p "This file is empty, what the hell is your problem?"
		fi
	else
		read -p "$inFile not found, try again."
	fi
}
getnumDoms(){

#	Get number of domains in $domainList, if it exists and is populated.

	if [[ -e $domainList ]] && [[ -s $domainList ]]
	then
		numDoms=$(wc -l $domainList|awk '{print $1}')
	else
		if [[ $alreadyPrinted -eq 0 ]]
		then
			echo -e "\t\t***No domains list at this time!! MIGRATIONS PARTS WILL ALL FAIL EXCEPT FOR SSH KEYS!!***"
			alreadyPrinted=1
		fi
		numDoms=0
	fi
}


showDomains(){
#	show all domains in $domainList without breaking anything.
	if [ ! -z "$domainList" ] && [ -e "$domainList" ]
	then
		echo -e "\n"
		cat $domainList
		getnumDoms
		echo -e "\nThere are currently $numDoms entries in $domainList\n\n"
		echo
		read -p "Press enter to return to menu"
	else
		if [ -s "$domainList" ] && [ "$domainList" -ne '' ]
		then
			echo -e "\n"
			read -p "Domain List ("$domainList") is currently empty, you should probably fix that.  Press enter to return to menu. . ."
		else
			echo -e "\n"
			read -p "Right now there is no file containing a list of domains.  Can't really migrate anything now, can we. . ."
		fi
	fi
}	

setAllDomains(){
#	Set domains list to use all domains from /etc/trueuserdomains
	echo -n > /root/domains.txt
	awk -F: '{print $1}' /etc/trueuserdomains >> /root/domains.txt	
	domainList='/root/domains.txt'
	echo "Set domains list to use ALL existing accounts!" && sleep 1
	permCheck=1
}

makeUnique(){
#	Make the list of domains in $domainList all have unique usernames
	getnumDoms
	if [[ $numDoms -ne 0 ]]
	then
		touch /root/tmpdomains
		echo -n > /root/tmpdomains
		for domain in $(cat $domainList)
		do 
			tmpUser=$(/scripts/whoowns $domain)
			awk -F: '$2 ~ /'$tmpUser'$/ {print $1}' /etc/trueuserdomains >> /root/tmpdomains
		done
		echo -n > $domainList
		sort /root/tmpdomains |uniq >> $domainList
		rm -f /root/tmpdomains
	fi
}


setSSHKeys(){
#	SSH keys made easy!

	if [ ! -z "$sshPort" ] && [ ! -z "$destIP" ]
	then
		rm -f /root/.ssh/id_dsa
		read -p "Have the password ready for the remote machine!"
		(
		expect -c '
			spawn ssh-keygen -t dsa
			expect -re {: $}
			send "\r"
			expect -re {: $}
			send "\r"
			expect -re {: $}
			send "\r"
			expect
		')

		echo "Now that that\'s done, I\'ll try to take it from here, all you should need to do is put the root password in two more times"
		ssh root@"$destIP" -p "$sshPort" 'if [[ ! -e /root/.ssh ]]; then mkdir /root/.ssh; fi'
		scp -P "$sshPort" /root/.ssh/id_dsa.pub "$destIP":/root/.ssh/authorized_keys2
		echo "Now that part is done, you may wish to check and ensure that you can SSH to the destination server without password auth."
	else
		echo -en "\n\nPlease make sure that the destination IP and SSH port are correctly populated!\n" && sleep 1
	fi
}

boolConvert(){
#	Convert a boolean expression to a yes/no
	if [[ $1 -eq 0 ]]
	then
		bool="No"
	elif [[ $1 -eq 1 ]]
	then
		bool="Yes"
	else
		echo "Something went wrong."
	fi

}

menu(){
	boolConvert permCheck
	clear
	logo
	getVerbosity
	makeUnique
	getnumDoms
	ipLength=${#destIP}
	portLength=${#sshPort}
	echo
	echo -e "\tOption\tValue\t\t\t\t\t\tOption\tMigration part\n"
	echo -e "\t0)\tExit this program\t\t\t\ta)\tSSH Keys made easier!!"
	if [ $ipLength -lt 5 ]
	then
		echo -e "\t1)\tDestination address: $destIP\t\t\t\tb)\tRun the remote script (restorepkg)"
	else
		if [ $ipLength -lt 11 ]
		then
			echo -e "\t1)\tDestination address: $destIP\t\t\tb)\tRun the remote script (restorepkg)"
		else
			echo -e "\t1)\tDestination address: $destIP\t\tb)\tRun the remote script (restorepkg)"
		fi
	fi
	if [ $portLength -lt 2 ]
	then
		echo -e "\t2)\tDestination SSH port: $sshPort\t\t\t\tc)\tRsync the home directories"
	else
		if [ $portLength -lt 10 ]
		then
			echo -e "\t2)\tDestination SSH port: $sshPort\t\t\tc)\tRsync the home directories"
		else
			echo -e "\t2)\tDestination SSH port: $sshPort\t\tc)\tRsync the home directories"
		fi
	fi
	echo -e "\t3)\tShow domain list (Currenly $numDoms domains)\t\td)\tSet homedir perms/etc. on DEST when complete(current: $bool)"
	echo -e "\t4)\tGet domain list from file"
	echo -e "\t5)\tGet domain list from reseller"
	echo -e "\t6)\tSet domain list to ALL domains"
	echo -e "\t7)\tChange verbosity; Currently: $verbosity"
	echo -e "\t8)\tMake domains list unique"
	echo -e "\t9)\tStart the migration!"
	echo
	echo_disclaimers
	echo
	read -p "Enter a selection >> " option
	
#	Take the options and do things with them
	case $option in
		0)
			echo "Leaving utility"
			exit 0
			;;
		1)
#			I would like this to accept just an "enter," but if you hit this option then fuck you, paste the IP in again.
			read -p "What is the destination IP address? >> " destIP
			;;
		2)
			read -p "What is the SSH port for the destination server? >> " sshPort
			;;
		3)
			showDomains
			;;
		4)
#			This will do more later, promise. . .
			getDomainsFromFile
			;;
		5)
			reseller=""
			getDomainsFromReseller
			;;
		6)
			setAllDomains
			;;
		7)
			read -p "Enter 0 for quiet, 1 for normal, or 2 for verbose: >> " verbose
			;;
		8)
			makeUnique
			;;
		9)
			echo "Roger that, continuing with existing data. . ."
			continue=1
			;;
		a)
			setSSHKeys
			;;
		b)
			runRemoteScript
			read -p "Complete, press enter to continue."
			;;
		c)
			rsyncHomeDirs
			read -p "Complete, press enter to continue."
			;;
		d)
			runcpPerm
			;;
	esac
}

#       Disclaimers
echo_disclaimers(){

	echo -en "\n\nOkay, so a few things:  This script makes some assumptions of you.\n"
	echo -en "For instance, please ensure that both servers are keyed, and don't forget to remove the keys when you are finished.  Also, this script does NO PRE-MIGRATION CHECKS!\n"
	echo -en "That being said, please ensure that you have done all of the footwork.  Make sure there is enough disk space, IP addresses, and so on.  Don't come whining to me if you \n"
	echo -en "are having trouble due to something that should have been handled before you started moving accounts.  I plan on putting some of that in here, however until that happens\n"
	echo -en "YOU are responsible for any pre or post migration work.  If you have any feature requests to this end, please feel free to use the Forum or send me an email at \n"
	echo -en "ahutchens@singlehop.com\n\n"
}



#       Set up remote scripts
create_remotesh(){
	touch /root/remotescript.sh
	echo -n > /root/remotescript.sh

	touch /root/getRemoteIPs.sh
	echo "cat /etc/ipaddrpool |grep -v ^10." > /root/getRemoteIPs.sh
}

#       Set up a directory for storing accounts.
create_migrate_dir(){
	regexNo='^[Nn][Oo]?'
	regexYes='[Yy][Ee]?[Ss]?'
	if [ ! -e /root/migrate_accounts ]
	then
		echo -en "\nCreating migrate_accounts directory\n"
		mkdir /root/migrate_accounts
	else
		if [  "$(ls -A /root/migrate_accounts)" ]
		then
			read -p "The migrate_accounts directory currently isn't empty, deleting content? (Y/n) " okayDel
			if [[ $okayDel =~ $regexYes ]]
			then
				echo -en "Okay man, I'm deleting the content. . .\n"
				rm -rvf /root/migrate_accounts
				mkdir /root/migrate_accounts
			else
				if [[ $okayDel =~ $regexNo ]]
				then
					echo -en "Not touching anything then, I hope nothing conflicts.\n"
				fi
			fi
		fi
	fi
}

#       Check for domains list, should eventually take arguments to parse more robustly
create_domainList(){
	if [ -z "$domainList" ] && [ -e /root/domains.txt ] && [ -s /root/domains.txt ]
	then
		domainList="/root/domains.txt"
	else
		if [ -z "$domainList" ]
		then
			echo -en "There isn't a domains lists yet, should work on that. . .\n"
		fi
	fi
}


#       Get details, Eventually this should take arguements rather than stdin
get_destIP(){
	if [ -z "$destIP" ]
	then
		read -p "What is the destination IP address? " destIP
	fi
}

#	Get SSH port:
get_sshPort(){
	if [ -z "$sshPort" ]
	then
		read -p "What is the SSH port? " sshPort
	fi
}

#       Get available IP address list from remote machine, This should be rendered moot in later builds
get_IP_list(){
	ssh root@"$destIP" -p "$sshPort" 'bash -s' 2>/dev/null < /root/getRemoteIPs.sh > /root/availableIPs.txt
}

rsyncHomeDirs(){
	#   Finally, rsync the content over:
	for curDomain in $(cat $domainList)
	do
#		curDomain="$i"
		curUser=$(awk '/^'$curDomain':/ {print $2}' /etc/trueuserdomains)
		curPath=$(awk '/^homedir:/ {print $2}' /var/cpanel/userdata/$curUser/$curDomain)
		echo -en "Attempting to rsync /home/$curUser. . ."
		case $verbose in
			0)
				rsync -pXa -e "ssh -p $sshPort" $curPath root@"$destIP":/home/ 2>> /root/migration.log >> /root/migration.log && echo -en "GREAT SUCCESS!!\n"
				;;
			1)
				rsync -pXa --progress -e "ssh -p $sshPort" $curPath root@"$destIP":/home/ |tee -a /root/migration.log && echo -en "\nGREAT SUCCESS!!\n"
				;;
			2)
				rsync -apXv --progress -e "ssh -p $sshPort" $curPath root@"$destIP":/home/ 2>&1 |tee -a /root/migration.log && echo -en "\nGREAT SUCCESS!!\n"
				;;
		esac
	done
}
runRemoteScript(){

	#     Run the script that our script created. script.
	testCpmove
	if [[ $failure -ne 0 ]]
	then
		echo "$failure domains will NOT restore!  This means that the cpmove file is NOT found in the /root/migrate_accounts directory on the remote server, stopping migration for now."
		exit 0
	else
		echo -en "\nAttempting to run the remote script. . .\n"
		case $verbose in
			0)
				ssh root@"$destIP" -p "$sshPort" 'bash -s' 2>/dev/null < /root/remotescript.sh && echo -en "GREAT SUCCESS!\n\n"
				;;
			1)
				ssh root@"$destIP" -p "$sshPort" 'bash -s' 2>/dev/null < /root/remotescript.sh |tee -a /root/remote.log && echo -en "GREAT SUCCESS!\n\n"
				;;
			2)
				ssh root@"$destIP" -p "$sshPort" 'bash -s' 2>/dev/null < /root/remotescript.sh 2>&1|tee -a /root/remote.log && echo -en "GREAT SUCCESS!\n\n"
				;;
		esac
		scp -P "$sshPort" root@$destIP:/root/remote.log /root/tmpLog >/dev/null
		cat /root/tmpLog >> /root/remote.log
		rm -f /root/tmpLog
	fi
}

testCpmove(){

#	Makes sure the migrate_accounts dir was succesfully moved
	echo "Checking for cpMove files on remote server"

	rm -f /root/tmplog
	rm -f /root/tempsh
	for i in $(ls /root/migrate_accounts/cpmove-*)
	do
		echo "ls -lah $i >/dev/null ; if [[ \$? -ne "0" ]]; then echo \"Error! Could not find $i on remote server!  This account will NOT restore!\";else echo \"$i located in proper location.\";fi" >> /root/tempsh
	done
	ssh root@"$destIP" -p "$sshPort" 'bash -s' 2>/dev/null < /root/tempsh |tee -a /root/migration.log /root/tmplog /dev/stdout
	failure=`grep -c '^Error!' /root/tmplog`
	rm -f /root/tmplog

}
main(){
#       Main loop
	checkScreen
	if [ -z $sshPort ]
	then
		sshPort=22
	fi
	continue=0
	while [[ $continue = 0 ]] && [[ $useMenu -ne 0 ]]
	do
		menu
	done
	get_IP_list && echo -e "Getting IP list from remote server\n"
	create_domainList && echo -e "Creating Domain list from available information\n"
	create_remotesh && echo -e "Creating remote script\n"
	create_migrate_dir && echo -e "Creating cpmove storage directory\n"
	get_destIP && echo -e "Checking destination IP address\n"
	get_sshPort && echo -e "Checking SSH port\n"
	makeUnique && echo -e "Making domains list unique wrt/ usernames\n"
	for curDomain in $(cat $domainList)
	do

#		Main loop declarations
		curUser=$(awk '$1 ~ /^'$curDomain':/ {print $2}' /etc/userdomains)
		curUserIP=`awk -F\= '/^IP=/ {print $2}' /var/cpanel/users/$curUser`

	#       check if account has ded IP:
		if [[ $curUserIP != $mainIP ]]
		then
	#               Okay, so this is just basically broken.  It works, but in order to stay inline with what I really want it basically needs to be rewritten.
			#curUserDed=1
			if [ -s /root/availableIPs.txt ]
			then
				echo -en "echo -en \"restoring $curUser. . .\\n\" && " >> /root/remotescript.sh
				echo -en "/scripts/restorepkg --ip=y /root/migrate_accounts/cpmove-"$curUser".tar.gz >> /root/remote.log\\n" >> /root/remotescript.sh
				sed -i '1 d' /root/availableIPs.txt

			else
				echo -en "Oh noes! you are out of dedicated IPs on the destination server.  Going with the main for now. . .\n"
				echo -en "echo \"restoring $curUser. . .\n\" && " >> /root/remotescript.sh
				echo -en "/scripts/restorepkg /root/migrate_accounts/cpmove-"$curUser".tar.gz >> /root/remote.log\\n" >> /root/remotescript.sh
			fi

		else
			echo -en "echo -en \"restoring $curUser. . .\" && " >> /root/remotescript.sh
			echo -en "/scripts/restorepkg /root/migrate_accounts/cpmove-"$curUser".tar.gz 2>&1 >> /root/remote.log\\n" >> /root/remotescript.sh
		fi

	case $verbose in
		0)
			/scripts/pkgacct --skiphomedir "$curUser" >> /root/migration.log && echo -en "$curUser packaged successfully\n"
			;;
		1)
			/scripts/pkgacct --skiphomedir "$curUser" |tee -a /root/migration.log && echo -en "\n$curUser packaged successfully\n"
			;;
		2)
			/scripts/pkgacct --skiphomedir "$curUser" 2>&1 |tee -a /root/migration.log && echo -en "\n$curUser packaged successfully\n"
			;;
	esac
	if [[ -e /home/cpmove-"$curUser".tar.gz ]]
	then
		mv /home/cpmove-"$curUser".tar.gz /root/migrate_accounts/
	elif [[ -e /home2/cpmove-"$curUser".tar.gz ]]
	then
		mv /home2/cpmove-"$curUser".tar.gz /root/migrate_accounts/
	else
		echo "I can't find the cpmove files in /home or /home2, something is wrong. Exiting program"
		exit 1
	fi

	done

	#       RSYNC ALL THE THINGS!!!!!
	echo -en "\n rsyncing migrate_accounts directory. . ."
	case $verbose in
		0)
			rsync -a -e "ssh -p $sshPort" /root/migrate_accounts root@$destIP:/root/ 2>/dev/null && echo -en "GREAT SUCCESS!\n"
			;;
		1)
			rsync -a --progress -e "ssh -p $sshPort" /root/migrate_accounts root@$destIP:/root/ && echo -en "GREAT SUCCESS!\n"
			;;
		2)
			rsync -av --progress -e "ssh -p $sshPort" /root/migrate_accounts root@$destIP:/root/ 2>&1 && echo -en "GREAT SUCCESS!\n"
			;;
	esac
#	run the remote script and handle the logging kinda badly:
	runRemoteScript
#	Rsync all of the home directory content over
	rsyncHomeDirs
	if [[ $permCheck=1 ]]
	then
		runcpPerm
	else
		echo "NOT checking perms, you should totally do that. . ."
	fi
}

logReport(){
	#       Okay, now to create some logging and reporting, Regex FTW!!!!!!
	sed -n '/^'"$curTime"'/,$ p' /root/migration.log |awk '/[Ff]ail|[Ss]orry|^pkgacctfile|^md5sum/ {print $0}' > $report
	echo -e "\n\n" >> $report
	sed -n '/^'"$curTime"'/,$ p' /root/remote.log |awk '/[Ff]ail|[Ss]orry|^(\||\+)/ {print $0}' >> $report

	doneDomains=`grep -c "| Domain:" $report`
	echo -en "\n\n$doneDomains have been completed, they are:\n" |tee -a $report
	grep 'Domain:' $report
	grep -A 1 'Domain:' $report >> $report

	echo -en "\nOkay now we're done here.  Or, at least I am.  Make sure to check migration.report to see if there were any errors with either the packaging or the restore process.\n"
	exit 0
}


while getopts ":p:a:f:r:FvqhsSc" opt; do
	case $opt in

		h)
			echo -en "\nUsage: cpMigrate [options] -p <SSH port> -a <remote IP address> -f <path/to/domains/file.txt> -r <reseller>\n\n"
			echo -en "\t-p <port>\t\tTakes the SSH port of the destination server\n"
			echo -en "\t-a <IP address>\t\tTakes the IP address of the destination server\n"
			echo -en "\t-f <filename>\t\t<filename> should contain a list of domains to be migrated\n"
			echo -en "\t-r <reseller>\t\tTakes a reseller as an arguement, should NOT be used with -f\n"
			echo -en "\t-v\t\t\tVerbose. Pipes more output to stdout instead of just the log.\n"
			echo -en "\t-q\t\t\tQuiet mode, only outputs to logs.\n"
			echo -en "\t-F\t\t\tMigrates ALL accounts. ***NOTE: This does NOT do any pre/post migration checks!!!!\n"
			echo -en "\t-S\t\t\tSet up SSH keys before going to the menu\n"
			echo -en "\t-s\t\t\tSkip the menu entirely.\n"
			echo -en "\t-c\t\t\tCorrect ALL homedir permissions on destination when complete\n"
			echo -en "\t-h\t\t\tPrints this help message\n\n"
			exit 0
			;;
		p)
#                       get SSH port from -p
			sshPort="$OPTARG"
			;;
		a)
#                       get Destination IP address from -a
			destIP="$OPTARG"
			;;
		f)
#                       get input file, for now it must be domains.
			if [ -e "$OPTARG" ]
			then
				if [ -s "$OPTARG" ]
				then
					domainList="$OPTARG"
					echo -en "\nSetting domain list file to $OPTARG\n"
				else
					echo -en "\nThis file is empty d00d, pls to fix before wasting my time.\n"
					exit 1
				fi
			else
				echo -en "\n$OPTARG not found\n"
				exit 1
			fi
			;;
		r)
			reseller=$OPTARG
			getDomainsFromReseller
			;;
		F)
			setAllDomains
			;;
		v)
			verbose=2
			;;
		q)
			verbose=0
			;;
		s)
			useMenu=0
			;;
		S)
			setSSHKeys
			;;
		c)
			permCheck=1
			;;
		\?)
			echo -en "\nInvalid option -$OPTARG\n"
			exit 1
			;;
		:)
			echo -en "\nOption -$OPTARG requires an argument.\n"
			exit 1
			;;
	esac
done

curTime=$(date)
echo -en "\n\n$curTime\tStarting migration script\n\n" | tee -a /root/migration.log /root/migration.err /root/remote.log

main

logReport
